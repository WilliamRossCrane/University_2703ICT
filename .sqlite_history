touch database/social_media.sqlite
php artisan migrate
.help
-- Create the posts table
CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Create the comments table
CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    author TEXT NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id)
);
-- Create the likes table
CREATE TABLE likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    user_name TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id)
);
sqlite3 database/social_media.sqlite
-- Create the posts table
CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    author TEXT NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Create the comments table
CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    author TEXT NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id)
);
-- Create the likes table
CREATE TABLE likes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    user_name TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id)
);
SELECT *
SELECT * FROM posts;
SELECT * FROM posts;
. tables
.tables
.help
.databases 
.tables
.tables
.schema users
.schema posts
.schema posts
ALTER TABLE posts ADD COLUMN user_id INTEGER;
.schema posts
INSERT INTO users (id, name, email, password, created_at, updated_at)
VALUES (1, 'William Crane', 'wcran7@gmail.com', '4212', NOW(), NOW());
INSERT INTO users (id, name, email, password, created_at, updated_at)
VALUES (1, 'William Crane', 'wcran7@gmail.com', '4212', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
.databases
.tables
SELECT * FROM posts;
INSERT INTO posts (user_id, title, content, author) VALUES (1, 'Test Post', 'This is a test post content.', 'Your Name');
.tables
SELECT * FROM posts;
CREATE TABLE posts (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    title TEXT,
    content TEXT,
    author TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO posts (user_id, title, content, author) VALUES (1, 'Test Post', 'This is a test post content.', 'Your Name');
SELECT * FROM posts;
.tables
.users
SELECT * FROM posts;
SELECT * FROM posts
.tables
.table
.schema
.tables
.tables
.schema users
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT,
    email TEXT UNIQUE,
    email_verified_at DATETIME,
    password TEXT,
    remember_token TEXT,
    created_at DATETIME,
    updated_at DATETIME
);
.tables
INSERT INTO users (name, email, email_verified_at, password, remember_token, created_at, updated_at)
VALUES ('John Doe', 'john@example.com', DATETIME('now'), 'password_hash', NULL, DATETIME('now'), DATETIME('now'));
.exit
-- Insert the first post
INSERT INTO posts (title, content, author, created_at) VALUES ('Post 1', 'Content for post 1', 'Author 1', datetime('now'));
-- Insert the second post
INSERT INTO posts (title, content, author, created_at) VALUES ('Post 2', 'Content for post 2', 'Author 2', datetime('now'));
-- Insert more posts as needed
SELECT * FROM posts;
.exit
SELECT * FROM posts;
.table
.schema posts
-- Insert Post 1
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (1, 'First Post', 'This is the content of the first post.', 'John Doe', '2023-09-10 08:00:00', '2023-09-10 08:00:00');
-- Insert Post 2
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (2, 'Second Post', 'Content for the second post goes here.', 'Jane Smith', '2023-09-11 10:30:00', '2023-09-11 10:30:00');
-- Insert Post 3
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (3, 'Another Post', 'This is yet another post for testing purposes.', 'Alice Johnson', '2023-09-12 14:45:00', '2023-09-12 14:45:00');
-- Insert Post 4
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (1, 'Post Number Four', 'Content for the fourth post.', 'John Doe', '2023-09-13 16:20:00', '2023-09-13 16:20:00');
-- Insert Post 5
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (4, 'Fifth Post', 'The fifth post content goes here.', 'Robert Brown', '2023-09-14 09:15:00', '2023-09-14 09:15:00');
-- Insert Post 6
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (2, 'Post Six', 'Content for the sixth post.', 'Jane Smith', '2023-09-15 11:00:00', '2023-09-15 11:00:00');
-- Insert Post 7
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (5, 'Lucky Number Seven', 'Seventh post content.', 'Michael Davis', '2023-09-16 14:30:00', '2023-09-16 14:30:00');
-- Insert Post 8
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (1, 'Eighth Post', 'Content for post number eight.', 'John Doe', '2023-09-17 17:45:00', '2023-09-17 17:45:00');
-- Insert Post 9
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (3, 'Ninth Post', 'Ninth post content here.', 'Alice Johnson', '2023-09-18 20:10:00', '2023-09-18 20:10:00');
-- Insert Post 10
INSERT INTO posts (user_id, title, content, author, created_at, updated_at)
VALUES (4, 'Tenth Post', 'Content for the tenth post.', 'Robert Brown', '2023-09-19 22:25:00', '2023-09-19 22:25:00');
* posts
;
-- Insert User 1
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('John Doe', 'john.doe@example.com', 'hashed_password_1', '2023-09-10 08:00:00', '2023-09-10 08:00:00');
-- Insert User 2
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Jane Smith', 'jane.smith@example.com', 'hashed_password_2', '2023-09-11 10:30:00', '2023-09-11 10:30:00');
-- Insert User 3
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Alice Johnson', 'alice.johnson@example.com', 'hashed_password_3', '2023-09-12 14:45:00', '2023-09-12 14:45:00');
-- Insert User 4
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Robert Brown', 'robert.brown@example.com', 'hashed_password_4', '2023-09-13 16:20:00', '2023-09-13 16:20:00');
-- Insert User 5
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Michael Davis', 'michael.davis@example.com', 'hashed_password_5', '2023-09-14 09:15:00', '2023-09-14 09:15:00');
-- Insert User 6
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Emily White', 'emily.white@example.com', 'hashed_password_6', '2023-09-15 11:00:00', '2023-09-15 11:00:00');
-- Insert User 7
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Daniel Smith', 'daniel.smith@example.com', 'hashed_password_7', '2023-09-16 14:30:00', '2023-09-16 14:30:00');
-- Insert User 8
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Linda Johnson', 'linda.johnson@example.com', 'hashed_password_8', '2023-09-17 17:45:00', '2023-09-17 17:45:00');
-- Insert User 9
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('William Brown', 'william.brown@example.com', 'hashed_password_9', '2023-09-18 20:10:00', '2023-09-18 20:10:00');
-- Insert User 10
INSERT INTO users (name, email, password, created_at, updated_at)
VALUES ('Olivia Davis', 'olivia.davis@example.com', 'hashed_password_10', '2023-09-19 22:25:00', '2023-09-19 22:25:00');
SELECT * FROM users;
SELECT * FROM posts;
CREATE TABLE comments (
    id INTEGER PRIMARY KEY,
    post_id INTEGER,
    author TEXT,
    message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id)
);
.tables
ALTER TABLE posts ADD COLUMN message TEXT;

.exit

